using System;
using System.Collections.Generic;

namespace WoffuKata
{
    public class Program
    {
        public static void Main(string[] args)
        {
            Console.WriteLine("START!");

            var app = new Woffu(this.GetAllocation());

            // si los 31 es por algo en especifico lo veo bien  , si son los dias segun mes yo pondria algo asi (si hiciera falta crear las var's):
            // for (var i = 0; i < DateTime.Now.Month(); i++)
            for (var i = 0; i < 31; i++)
            {
                Console.WriteLine("-------- day " + i + " --------");
                Console.WriteLine("name, expiration, availability");

                //Aqui al tener la collecion haria un foreach ya que no necesitas contars.
                // foreach (var allocaction in allocations)
                for (var j = 0; j < allocations.Count; j++)
                {
                    // entonces quedaria la sentencia de writeLine mas facil
                    //Console.WriteLine($"{allocation.Name}, {allocation.DaysToExpiration}, {allocation.Availability}");
                    System.Console.WriteLine(allocations[j].Name + ", " + allocations[j].DaysToExpiration + ", " + allocations[j].Availability);
                }
                Console.WriteLine("");
                app.UpdateAvailability();
            }
        }

        // Permites inicalizar la lista que necesitas , hacer comprobaciones sin 'ensuciar' otra parte del codigo
        private static IList<Allocations> GetAllocation()
        {
    
          IList<Allocation> allocations = new List<Allocation>{
                    new Allocation { Name = "FreeDisposal", DaysToExpiration = 20, Availability = 19 },
                    new Allocation { Name = "HomeWork", DaysToExpiration = 12, Availability = 1 },
                    new Allocation { Name = "Vacation", DaysToExpiration = 15, Availability = 7 },
                    new Allocation { Name = "Sickness", DaysToExpiration = 0, Availability = 25 },
                    new Allocation { Name = "RemoteWork", DaysToExpiration = 15, Availability = 2 },
    				// this compensated allocation does not work properly yet
    				new Allocation { Name = "Compensated FreeDisposal", DaysToExpiration = 20, Availability = 18 }
                };
    
            return allocations;
        }

    }
}
